name: Run Login Script

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 */10 * *"  # 每三天运行一次，可以根据需求调整时间
  push:
    branches:
      - main
jobs:
  login:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 仓库代码
        uses: actions/checkout@v2

      - name: 设置 Python 环境
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # 设置你希望使用的 Python 版本，建议使用稳定版本

      - name: Create accounts.json from environment variable
        run: echo "$ACCOUNTS_JSON" > accounts.json
        env:
            ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}  # 从GitHub Secrets中获取环境变量

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install pyppeteer aiofiles requests
          pip install --upgrade pyppeteer

      - name: 运行登录脚本
        id: run_script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SCKEY: ${{ secrets.SCKEY }}
          ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}
        run: |
          python login_script.py
          echo "::set-output name=exitcode::$?"  # 设置脚本的退出码作为输出变量

      - name: 检查脚本执行结果
        if: steps.run_script.outputs.exitcode!= 0
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueTitle = 'Login Script Execution Failed';
            const issueBody = `The login script failed with exit code ${steps.run_script.outputs.exitcode}. Please check the logs for details.`;
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody
            });
